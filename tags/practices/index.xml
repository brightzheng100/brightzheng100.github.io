<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Practices on The future is Bright</title><link>https://brightzheng100.github.io/tags/practices/</link><description>Recent content in Practices on The future is Bright</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Copyright Â© 2021 Bright Zheg. All Rights Reserved.</copyright><lastBuildDate>Sun, 20 Jun 2021 17:34:17 +0800</lastBuildDate><atom:link href="https://brightzheng100.github.io/tags/practices/index.xml" rel="self" type="application/rss+xml"/><item><title>Howto Contribute to OSS Projects With Git Practices Part 1</title><link>https://brightzheng100.github.io/post/2021/06/howto-contribute-to-oss-projects-with-git-practices-part-1/</link><pubDate>Sun, 20 Jun 2021 17:34:17 +0800</pubDate><guid>https://brightzheng100.github.io/post/2021/06/howto-contribute-to-oss-projects-with-git-practices-part-1/</guid><description>
&lt;hr>
&lt;p>I'm a big fan of contributing back to the OSS community while learning and/or engaging OSS projects, which can be &lt;a href="https://github.com/concourse/concourse-bosh-deployment/pulls?q=is%3Apr+%22%40brightzheng100%22">Concourse&lt;/a>, &lt;a href="https://github.com/minio/minio-boshrelease/pulls?q=is%3Apr+%22%40brightzheng100%22">MinIO&lt;/a>, &lt;a href="https://github.com/kubernetes-sigs/multi-tenancy/pulls?q=is%3Apr+%22%40brightzheng100%22">Kubernetes&lt;/a> and more.&lt;/p>
&lt;p>And Git will always play a big part of it, as a collaboration platform for issues and pull requests (PRs).&lt;/p>
&lt;p>Here are some of the typical practices while learning and/or engaging OSS projects. And I may be continuously adding more and more such practices along the way, consolidating some of my learned/tried ones too.&lt;/p>
&lt;blockquote>
&lt;p>Note: The majority of the contents is originated from my gist: &lt;a href="https://gist.github.com/brightzheng100/6993117dda82437ce1b31ba531a87daf">https://gist.github.com/brightzheng100/6993117dda82437ce1b31ba531a87daf&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h2 id="adding-upstream-remote-to-our-forked-git-repos">Adding upstream remote to our forked Git repos&lt;/h2>
&lt;p>Forking is always the first step before contributing.&lt;/p>
&lt;p>And adding the upstream remote to our forked Git repos helps us keep in synced with upstream before any contribution.&lt;/p>
&lt;p>Assuming we have forked the repo.&lt;/p>
&lt;p>Now we clone our forked repo, with &lt;code>git&lt;/code> protocol:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="ln">1&lt;/span>$ git clone git@github.com:YOUR-USERNAME/THE-REPO.git
&lt;/code>&lt;/pre>&lt;/div>&lt;p>See what remotes we have:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="ln">1&lt;/span>$ git remote -vv
&lt;span class="ln">2&lt;/span>origin git@github.com:YOUR-USERNAME/THE-REPO.git &lt;span class="o">(&lt;/span>fetch&lt;span class="o">)&lt;/span>
&lt;span class="ln">3&lt;/span>origin git@github.com:YOUR-USERNAME/THE-REPO.git &lt;span class="o">(&lt;/span>push&lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>To add the upstream remote, with &lt;code>https&lt;/code> protocol:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="ln">1&lt;/span>$ git remote add upstream https://github.com/UPSTREAM-NAMESPACE/THE-REPO.git
&lt;span class="ln">2&lt;/span>$ git remote -vv
&lt;span class="ln">3&lt;/span>origin git@github.com:YOUR-USERNAME/THE-REPO.git &lt;span class="o">(&lt;/span>fetch&lt;span class="o">)&lt;/span>
&lt;span class="ln">4&lt;/span>origin git@github.com:YOUR-USERNAME/THE-REPO.git &lt;span class="o">(&lt;/span>push&lt;span class="o">)&lt;/span>
&lt;span class="ln">5&lt;/span>upstream https://github.com/UPSTREAM-NAMESPACE/THE-REPO.git &lt;span class="o">(&lt;/span>fetch&lt;span class="o">)&lt;/span>
&lt;span class="ln">6&lt;/span>upstream https://github.com/UPSTREAM-NAMESPACE/THE-REPO.git &lt;span class="o">(&lt;/span>push&lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="syncing-a-fork-with-its-upstream">Syncing a fork with its upstream&lt;/h2>
&lt;ol>
&lt;li>Fetch the branches and their respective commits from the upstream repository to Git's local database:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>$ git fetch upstream
&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>Check out your fork's local &lt;code>master&lt;/code> branch:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>$ git checkout master
&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>Merge the updates from &lt;code>upstream/master&lt;/code> into your local &lt;code>origin/master&lt;/code> branch:&lt;/li>
&lt;/ol>
&lt;p>This syncs up your fork's local &lt;code>master&lt;/code> branch with the upstream repository &lt;code>upstream/master&lt;/code>, without losing your local changes.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="ln">1&lt;/span>$ git merge upstream/master
&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="4">
&lt;li>Push it to your fork:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>$ git push
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="checking-whats-going-to-be-pushed">Checking what's going to be pushed?&lt;/h2>
&lt;p>For a list of files to be pushed, run:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>$ git diff --stat --cached [remote/branch]
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="contributing-to-a-pr">Contributing to a PR&lt;/h2>
&lt;p>It's ALWAYS recommended to start the contribution, a potential PR, with a dedicated new branch.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1"># Start from synced origin/master&lt;/span>
&lt;span class="ln"> 2&lt;/span>$ git checkout master
&lt;span class="ln"> 3&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="c1"># Create a new local branch&lt;/span>
&lt;span class="ln"> 5&lt;/span>$ git checkout -b my-awesome-feature
&lt;span class="ln"> 6&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="c1"># ...work, work, work...&lt;/span>
&lt;span class="ln"> 8&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="c1"># Add the work&lt;/span>
&lt;span class="ln">10&lt;/span>$ git add xxx
&lt;span class="ln">11&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="c1"># Commit it &lt;/span>
&lt;span class="ln">13&lt;/span>$ git commit -m &lt;span class="s2">&amp;#34;add my awesome feature&amp;#34;&lt;/span> my-files
&lt;span class="ln">14&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="c1"># Push it as a remote branch&lt;/span>
&lt;span class="ln">16&lt;/span>$ git push origin my-awesome-feature
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then we can send it as a PR, through GitHub UI, between such a branch to desired upstream branch, which typically &lt;code>master&lt;/code>.&lt;/p>
&lt;h2 id="contributing-to-multiple-prs">Contributing to multiple PRs&lt;/h2>
&lt;p>Multiple PRs are of course possible, simply with different branches.&lt;/p>
&lt;p>Let's say we start our feature 1:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>$ git checkout master
&lt;span class="ln">2&lt;/span>$ git checkout -b my-awesome-feature-1
&lt;span class="ln">3&lt;/span>...work, work, work
&lt;span class="ln">4&lt;/span>$ git add xxx
&lt;span class="ln">5&lt;/span>$ git commit -am &amp;#34;add my-awesome-feature-1&amp;#34;
&lt;span class="ln">6&lt;/span>$ git push origin my-awesome-feature-1
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then we can send it as a PR through GitHub UI.&lt;/p>
&lt;p>While pending for further discussions and merging, you can start another feature 2 too:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>$ git checkout master
&lt;span class="ln">2&lt;/span>$ git checkout -b my-awesome-feature-2
&lt;span class="ln">3&lt;/span>...work, work, work
&lt;span class="ln">4&lt;/span>$ git add xxx
&lt;span class="ln">5&lt;/span>$ git commit -am &amp;#34;add my-awesome-feature-2&amp;#34;
&lt;span class="ln">6&lt;/span>$ git push origin my-awesome-feature-2
&lt;/code>&lt;/pre>&lt;/div>&lt;p>So two features are relatively independent.&lt;/p>
&lt;h2 id="how-to-rollback-some-specific-files">How to &amp;quot;rollback&amp;quot; some specific files?&lt;/h2>
&lt;p>You may have messed up some files and you want to &amp;quot;rollback&amp;quot; to the original:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># To simply rollback that file&lt;/span>
&lt;span class="ln">2&lt;/span>$ git checkout that-file.ext
&lt;span class="ln">3&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="c1"># Or to rollback to some specific version&lt;/span>
&lt;span class="ln">5&lt;/span>$ git checkout master~2 that-file.ext
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="resetting-things-if-pr-is-not-accepted">Resetting things if PR is not accepted?&lt;/h2>
&lt;p>It's also common if a PR is not accepted as there might be many reasons:&lt;/p>
&lt;ul>
&lt;li>There is already another ongoing PR which has covered what you're trying to achieve;&lt;/li>
&lt;li>Your PR is simply not good enough;&lt;/li>
&lt;li>The author / maintainer has different opinion compared to yours;&lt;/li>
&lt;li>etc.&lt;/li>
&lt;/ul>
&lt;p>This is okay and you may want to &lt;strong>reset&lt;/strong> it in your fork after the PR has been closed.&lt;/p>
&lt;p>If you've adopted PR-as-a-new-branch approach, you can simply remove the local and remote branch if you don't want to keep it -- or you simply do nothing and leave it there, for your future reference.&lt;/p>
&lt;p>Let's say you want to remove it completely:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># Delete the local branch&lt;/span>
&lt;span class="ln">2&lt;/span>$ git branch -d &amp;lt;branch_name&amp;gt;
&lt;span class="ln">3&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="c1"># Delete the remote branch&lt;/span>
&lt;span class="ln">5&lt;/span>$ git push --delete origin &amp;lt;branch_name&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Worse case might be: you were using &lt;code>master&lt;/code>, instead of a dedicated branch, while working on the new feature.&lt;/p>
&lt;p>Do this in this case:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1"># Fetch the upstream/master&lt;/span>
&lt;span class="ln"> 2&lt;/span>$ git fetch upstream
&lt;span class="ln"> 3&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="c1"># Check out to the origin/master&lt;/span>
&lt;span class="ln"> 5&lt;/span>$ git checkout master
&lt;span class="ln"> 6&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="c1"># Hard reset the origin/master to upstream/master&lt;/span>
&lt;span class="ln"> 8&lt;/span>$ git reset --hard upstream/master
&lt;span class="ln"> 9&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="c1"># Double check the logs&lt;/span>
&lt;span class="ln">11&lt;/span>$ git log --oneline
&lt;span class="ln">12&lt;/span>
&lt;span class="ln">13&lt;/span>&lt;span class="c1"># Force push to origin/master&lt;/span>
&lt;span class="ln">14&lt;/span>git push --force-with-lease origin master
&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>